<h2>Testing</h2>
<div class="small">
  <strong>Hinweis:</strong>
  Auf Heroku.com funktionieren Hintergrundprozesse nur mit
  kostenpflichtigen <code>worker</code>-Instanzen.
</div>
<div class="left">
  <h3>Delayed::Job » MessageJob</h3>
  <div class="box">
    <p>
      Der folgende Link erzeugt einen Hintergrundprozess, der
      nach einer definierten Zeit eine neue Nachricht generiert.
    </p>
    <div class="link">
      <%= link_to 'Nachricht generieren', testing_generate_message_path, :class => 'button' %>
    </div>
    <pre>def generate_message
  Delayed::Job.enqueue(                # method call
    MessageJob.new(
      current_user.id,
      current_user.mandator_id
    ),
    :priority => 0,                    # priority
    :run_at   => 5.minutes.from_now    # execution time
  )
  redirect_to [...]
end

class MessageJob < Struct.new(:user)
  def perform
    Message.create({
      :title       => '[...]',
      :text        => '[...]',
      :user_id     => user.id,
      :mandator_id => user.mandator_id
    })
  end
end</pre>
  </div>
</div>
<div class="right">
  <h3>Delayed::Job » ImportInvoicesJob</h3>
  <div class="box">
    <p>
      Der folgende Link erzeugt einen Hintergrundprozess, der
      eine XML-Datei von <a href="https://github.com/fleacircus/oinfo/blob/master/test/files/invoices.xml" target="_blank">http://localhost/invoices.xml</a> holt und
      die darin definierten Rechnungen importiert.
    </p>
    <div class="link">
      <%= link_to 'Rechnungen importieren', testing_import_invoices_path, :class => 'button' %>
    </div>
    <pre>def import_invoices
  Delayed::Job.enqueue(                # method call
    ImportInvoicesJob.new(
      current_user.id,
      current_user.mandator_id
    ),
    :priority => 10,                   # priority
  )
  redirect_to [...]
end

class ImportInvoicesJob < Struct.new(:user)
  def perform
    data = Hash.from_xml open('[...]')

    data['invoices']['invoice'].each do |set|
      # check if invoice already exists
      test = Invoice.where(
        :invoice_number => set['invoice_number'],
        :mandator_id    => self.mandator_id
      ).first

      if test.nil?
        # import analysis
        [... » <a href="https://github.com/fleacircus/oinfo/blob/master/app/jobs/import_invoices_job.rb" target="_blank">GitHub</a>]
        invoice.save!
      end
    end
  end
end</pre>
  </div>
</div>
<div class="clear"></div>
<h3>Delayed::Job » Tasks</h3>
<%= grid(@tasks_grid, :show_filters => :no) do |g|

  g.column :html => {:class => 'numeric shrink'}, :name => 'Id',
    :attribute => 'id' do |task|
      task.id
  end

  g.column :html => {:class => 'numeric shrink'}, :name => t('activerecord.attributes.task.priority'),
    :attribute => 'id' do |task|
      task.priority
  end

  g.column :name => t('activerecord.attributes.task.handler'),
    :attribute => 'handler' do |task|
      content_tag(:pre, task.handler)
  end

  g.column :html => {class: 'fdatetime'}, :name => t('activerecord.attributes.task.run_at'),
    :attribute => 'run_at' do |task|
      task.run_at.nil? ? '' : l(task.run_at, format: :fdatetime)
  end

  render 'shared/grid_columns_timestamps', :row => g, :model => Delayed::Job, :timestamps => [:created_at]
  render 'shared/grid_row_no_instances', :grid => @tasks_grid, :row => g, :model => 'activerecord.models.task'

end %>
